{
	"name": "04 Analyze data with Scala",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "Spark1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2
		},
		"metadata": {
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/58f8824d-32b0-4825-9825-02fa6a801546/resourceGroups/prlangadrg/providers/Microsoft.Synapse/workspaces/synapsedemosws/bigDataPools/Spark1",
				"name": "Spark1",
				"type": "Spark",
				"endpoint": "https://synapsedemosws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/Spark1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Read Data From SQL Pool\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_City = spark.read.sqlanalytics(\"SQLPool01.wwi.DimCity\") \n",
					"val df_FactOrder = spark.read.sqlanalytics(\"SQLPool01.wwi.FactOrder\")\n",
					" // df.show(10)"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"df_City.createOrReplaceTempView(\"city\")\n",
					"df_FactOrder.createOrReplaceTempView(\"factOrder\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Data Exploration and Analysis\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df = spark.sql(\"select * from factOrder\")"
				],
				"execution_count": 27
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Use of Magic commands\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"%%sql \n",
					"SELECT * FROM city"
				],
				"execution_count": 26
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Join Data\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df = (spark.sql(\"\"\"SELECT city.StateProvince, SUM(Quantity) as TotalOrders \n",
					"                    FROM factorder \n",
					"                    JOIN  city on city.CityKey=factorder.CityKey \n",
					"                    group by city.StateProvince \n",
					"                    order by SUM(Quantity) desc \"\"\"))\n",
					"display(df.limit(10))"
				],
				"execution_count": 38
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write result to ADLS Gen2 in Parquet format\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Primary storage info\n",
					"val account_name = \"<storage account>\" // fill in your primary account name\n",
					"val container_name = \"<container name>\" // fill in your container name\n",
					"val relative_path = \"<folder name>\" // fill in your relative folder path\n",
					"\n",
					"val adls_path = f\"abfss://$container_name@$account_name.dfs.core.windows.net/$relative_path/\"\n",
					"print(\"Primary storage account path: \" + adls_path)\n",
					"val parquet_path = adls_path + \"OrdersByState\"\n",
					"df.write.mode(\"Overwrite\").parquet(parquet_path)\n",
					""
				],
				"execution_count": 51
			}
		]
	}
}