{
	"name": "000 Data Exploration on CosmosDB",
	"properties": {
		"folder": {
			"name": "Demo notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "analyticspool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2
		},
		"metadata": {
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7e416de3-c506-4776-8270-83fd73c6cc37/resourceGroups/demosynapserg/providers/Microsoft.Synapse/workspaces/wsazuresynapseanalytics/bigDataPools/analyticspool",
				"name": "analyticspool",
				"type": "Spark",
				"endpoint": "https://wsazuresynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/analyticspool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Data Exploration on CosmosDB Analytical Store\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Read data from CosmosDB Analytical Store container\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"_rid"
							],
							"values": [
								"_ts"
							],
							"yLabel": "_ts",
							"xLabel": "_rid",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"_ts\":{\"sY0TAOBJNuEBAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuECAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEDAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEEAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEFAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEGAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEHAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEIAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEJAAAAAAAAAA==\":1598476485,\"sY0TAOBJNuEKAAAAAAAAAA==\":1598476485}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"# Read from Cosmos DB analytical store into a Spark DataFrame and display 10 rows from the DataFrame\n",
					"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
					"\n",
					"df_Products = spark.read\\\n",
					"    .format(\"cosmos.olap\")\\\n",
					"    .option(\"spark.synapse.linkedService\", \"RetailSalesDemoDB\")\\\n",
					"    .option(\"spark.cosmos.container\", \"Products\")\\\n",
					"    .load()\n",
					"\n",
					"display(df_Products.limit(10))\n",
					"\n",
					"df_RetailSales = spark.read\\\n",
					"    .format(\"cosmos.olap\")\\\n",
					"    .option(\"spark.synapse.linkedService\", \"RetailSalesDemoDB\")\\\n",
					"    .option(\"spark.cosmos.container\", \"RetailSales\")\\\n",
					"    .load()\n",
					"\n",
					"display(df_RetailSales.limit(10))"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Read data from storage account\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"minoritiesRatio"
							],
							"values": [
								"income"
							],
							"yLabel": "income",
							"xLabel": "minoritiesRatio",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"income\":{\"0.032618824\":10.787151,\"0.034178745\":11.043929,\"0.05608608\":10.959175,\"0.060687453\":11.233198,\"0.0700342\":10.605818,\"0.07350789\":10.983121,\"0.07465643\":10.793537,\"0.0994917\":10.756029,\"0.1877609\":10.585245,\"0.22099106\":10.188366}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"df_StoreDemographics = spark.read.load('abfss://default@azuresynapsesa.dfs.core.windows.net/RetailData/Transformed_StoreDemographicsData.parquet', format='parquet')\n",
					"display(df_StoreDemographics.limit(10))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Join data to get single dataset\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"diagram": {
						"activateDiagramType": 1,
						"chartConfig": {
							"category": "bar",
							"keys": [
								"storeId"
							],
							"values": [
								"_ts"
							],
							"yLabel": "_ts",
							"xLabel": "storeId",
							"aggregation": "SUM",
							"aggByBackend": false
						},
						"aggData": "{\"_ts\":{}}",
						"isSummary": false,
						"previewData": {
							"filter": null
						},
						"isSql": false
					}
				},
				"source": [
					"df = df_RetailSales.join(df_Products, on=['productCOde'], how='left').join(df_StoreDemographics, on=['storeId'], how = 'left')\n",
					"display(df)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"df=df.drop(\"_rid\",\"_ts\",\"_etag\",\"id\")"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Write Data to Data Lake\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import *\n",
					"\n",
					"# Primary storage info\n",
					"account_name = 'azuresynapsesa' # fill in your primary account name\n",
					"container_name = 'default' # fill in your container name\n",
					"relative_path = 'SurfaceRetailSales' # fill in your relative folder path\n",
					"\n",
					"adls_path = 'abfss://%s@%s.dfs.core.windows.net/%s' % (container_name, account_name, relative_path)\n",
					"print('Primary storage account path: ' + adls_path)"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"source": [
					"parquet_path = adls_path + 'surfaceretailsales.parquet'\n",
					"json_path = adls_path + 'surfaceretailsales.json'\n",
					"csv_path = adls_path + 'surfaceretailsales.csv'\n",
					"print('parquet file path: ' + parquet_path)\n",
					"print('json file pathï¼š ' + json_path)\n",
					"print('csv file path: ' + csv_path)"
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"df.write.parquet(parquet_path, mode = 'overwrite')\n",
					"df.write.json(json_path, mode = 'overwrite')\n",
					"df.write.csv(csv_path, mode = 'overwrite', header = 'true')"
				],
				"execution_count": 17
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Alternatively, Load data to SQL pool"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df.createOrReplaceTempView('retail_df')"
				],
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"source": [
					"%%spark\n",
					"val scala_df = spark.sqlContext.sql (\"select * from retail_df\")\n",
					"scala_df.write.sqlanalytics(\"WWI_Pool.dbo.SurfaceRetailSales\", Constants.INTERNAL)"
				],
				"execution_count": 27
			}
		]
	}
}