{
	"name": "88 SQL Pool Security Setup",
	"properties": {
		"content": {
			"query": "-- type your sql script here, we now have intellisense\n\n--create schema\nCreate Schema security;\n\n/*****************************************************************************************************************/\n-- 1. Setting up Dynamic Data Masking on EmailId column of security.CustomerPIIData\n\n        ALTER TABLE security.CustomerPIIData  \n        ALTER COLUMN EmailId varchar(100) MASKED WITH (FUNCTION = 'email()'); \n\n        ALTER TABLE security.CustomerPIIData  \n        ALTER COLUMN Phone1 varchar(100) MASKED WITH (FUNCTION = 'partial(0,\"XXXXXXXX\",2)'); \n\n        ALTER TABLE security.CustomerPIIData  \n        ALTER COLUMN Phone2 varchar(100) MASKED WITH (FUNCTION = 'partial(0,\"XXX-XXX-XX\",2)'); \n\n/*****************************************************************************************************************/\n\n-- 2. Setting up Row Level Security on State\n\n        --Create User and Grant Select Permissions\n        CREATE USER [prlangad@microsoft.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON security.CustomerPIIData TO [prlangad@microsoft.com] \n        EXEC sp_addrolemember 'db_datareader', 'prlangad@microsoft.com'\n\n        CREATE USER [charlesf@microsoft.com] FROM EXTERNAL PROVIDER\n        GRANT SELECT ON security.CustomerPIIData TO [charlesf@microsoft.com] \n        EXEC sp_addrolemember 'db_datareader', 'charlesf@microsoft.com'\n\n\n        --Grant Impersonate permissions for AAD login \n        GRANT IMPERSONATE ON USER::[prlangad@microsoft.com] TO [charlesf@microsoft.com];\n        GRANT IMPERSONATE ON USER::[charlesf@microsoft.com] TO [prlangad@microsoft.com];\n\n        --Create roles as values present in column \n        --CREATE ROLE [DE]; --This role already exists for SQL login\n        CREATE ROLE [CA];\n        CREATE ROLE [PA];\n        CREATE ROLE [NY];\n       \n        -- Add AAD users to roles      \n        EXEC sp_addrolemember 'NY', 'prlangad@microsoft.com';\n        EXEC sp_addrolemember 'PA', 'prlangad@microsoft.com';\n        EXEC sp_addrolemember 'CA', 'charlesf@microsoft.com';\n\n\n        CREATE FUNCTION security.fn_securitypredicate_rolemember(@State AS sysname)  \n        RETURNS TABLE  \n        WITH SCHEMABINDING  \n        AS  \n        RETURN SELECT 1 AS fn_securitypredicate_result   \n        WHERE \n            (@State = 'NY' and IS_ROLEMEMBER('NY') = 1) \n        or (@State = 'CA' and IS_ROLEMEMBER('CA') = 1) \n        or (@State = 'PA' and IS_ROLEMEMBER('PA') = 1)\n        or IS_ROLEMEMBER('dbo') = 1; \n\n        --Create Security Policy to filter rows based on column values \n        CREATE SECURITY POLICY StateFilter_rolemember \n        ADD FILTER PREDICATE security.fn_securitypredicate_rolemember([state])   \n        ON  security.CustomerPIIData \n        WITH (STATE = ON); \n\n\n        --Test Runs\n        select USER_NAME()\n        select top 100 * from security.CustomerPIIData \n        EXECUTE AS USER ='prlangad@microsoft.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from security.CustomerPIIData ;\n        revert\n        EXECUTE AS USER ='charlesf@microsoft.com'\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 [State], * from security.CustomerPIIData ;\n        revert\n        select user_name() as UserName, is_rolemember('NY') As IsALCustomer, is_rolemember('CA') As IsCACustomer\n        select top 100 * from security.CustomerPIIData ;\n\n\n\n        -- In case SQL Login RLS desired, execute below statement to drop security policy \n        --and then execute create security policy from script 02 Set up RLS on Cust Data\n        DROP SECURITY POLICY StateFilter_rolemember; \n        DROP FUNCTION Security.fn_securitypredicate_rolemember\n        DROP SCHEMA Security;\n\n/*****************************************************************************************************************/\n\n-- 3. Setting up Column level encryption on SSN\n\n\n        -- DMV to check if Master Key is present\n        SELECT TOP 10 * FROM sys.symmetric_keys\n\n        ----Create Certificate-----------\n        CREATE CERTIFICATE Cert1\n            encryption by password = 'A34d@thp87'\n            WITH SUBJECT = 'cert subject',\n            START_DATE = '20160217', \n            EXPIRY_DATE = '20450217'\n        GO\n\n        select * from sys.certificates\n\n\n\n        ------Create Asymmetric Key---------\n        CREATE ASYMMETRIC KEY Akey1\n            WITH ALGORITHM = RSA_3072\n            ENCRYPTION BY PASSWORD = 'A34d@thp8723'\n        GO\n\n        select * from sys.asymmetric_keys\n\n\n        ------------Create Symmetric Key-----------\n        CREATE SYMMETRIC KEY Key1\n            WITH \n            KEY_SOURCE = 'key source ',\n            IDENTITY_VALUE = 'identity value',\n            ALGORITHM = AES_192\n            ENCRYPTION BY certificate Cert1, asymmetric key Akey1, password = 'A34d@thp8723'\n        Go\n\n        Select * from sys.symmetric_keys\n\n\n        ----Set up table----------------- \n        select * from [security].CustomerPIIData \n\n        ALTER TABLE [security].CustomerPIIData \n        ADD SSN_encrypted varbinary(128); \n\n\n        -------Open symmetric key-----------------\n        open symmetric key Key1 decryption by password = 'A34d@thp8723'\n        Select * from sys.openkeys\n\n\n        ------EncrypyByKey--------------------------\n                            \n\n\n        /* this is temporary code - start*/\n        --declare @Noofrecords int = (select count(*) from [security].CustomerPIIData )\n        --declare @iter int =1\n        --while (@iter<@Noofrecords) \n        --Begin\n\n        --\tdeclare @ssnval nvarchar(15) = (select SSN from [security].CustomerPIIData where Id=@Iter)\n        --\tdeclare @enstring varbinary(128) = convert(varbinary(128),EncryptByKey(Key_GUID('Key1'), @ssnval))\n        --\tselect @enstring\n        --\tUPDATE [security].[CustomerPIIData] SET SSN_encrypted = @enstring where SSN=@ssnval\n\n        --\tSET @iter = @iter+1\n        --End\n        /* this is temporary code - end*/\n\n\n        open symmetric key Key1 decryption by password = 'A34d@thp8723'\n        UPDATE [security].[CustomerPIIData] SET SSN_encrypted =  convert(varbinary(128),EncryptByKey(Key_GUID('Key1'), SSN));\n        Close symmetric key Key1\n\n        -----DecryptByKey---------------\n\n        open symmetric key Key1 decryption by password = 'A34d@thp8723'\n        SELECT SSN, SSN_encrypted, CONVERT(nvarchar, DECRYPTBYKEY(SSN_Encrypted)) AS 'SSN_decrypted' FROM [security].CustomerPIIData \n\n        ------Close symmetric key---------\n        Close symmetric key Key1\n\n        ------Drop------------------\n        Drop symmetric key Key1\n        Drop asymmetric key Akey1\n        Drop certificate [Cert1] \n                ",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"name": "SQLPool01",
				"type": "SqlPool"
			}
		},
		"type": "SqlQuery"
	}
}